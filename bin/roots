#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    colors = require('colors'),
    compiler = require('../lib/roots'),
    server = require('../lib/server'),
    debug = require('../lib/debug'),
    ncp = require('ncp').ncp,
    argv = require('optimist').argv,
    bower = require('bower'),
    run = require('child_process').exec,
    watcher = require('../lib/watcher'),
    current_directory = path.normalize(process.cwd());

var options = {

  // --------------------------------------------------------------------------
  // run a warning if not in a roots folder
  // --------------------------------------------------------------------------

  in_project: function(){ return fs.existsSync(current_directory + '/app.coffee') },
  no_project_warning: function(){ console.log("\nnot a roots project - run `roots help` if you are confused\n".yellow); },

  // --------------------------------------------------------------------------
  // set up options if we're in a roots project folder
  // --------------------------------------------------------------------------

  initiate_options: function(){
    // pull the app config file, compiled with coffeescript
    require('coffee-script');
    var options = global.options = require(current_directory + '/app.coffee');

    // go through compilers and figure out which file extensions we need to
    // compile for this project
    options.file_types = {}
    core_compilers_path = path.normalize('../lib/compilers/core');
    plugins_path = path.join(current_directory + '/vendor/plugins');

    var parse_filetypes = function(compiler_path){
      fs.readdirSync(compiler_path).forEach(function(file){
        var compiler = require(path.join(compiler_path, file)).settings
        if (options.file_types[compiler.target] == undefined) { options.file_types[compiler.target] = [] }
        options.file_types[compiler.target].push(compiler.file_type);
      });
    }

    // add all core compilers and plugins, if there are any
    parse_filetypes(core_compilers_path);
    if (fs.existsSync(plugins_path)) { parse_filetypes(plugins_path); }

    // make sure all layout files are ignored
    for (var key in options.layouts){
      options.ignore_files.push(new RegExp(options.layouts[key]));
    }

    // set the debug flag
    debug.set_debug(options.debug)

    // livereload function won't render anything unless in watch mode
    options.locals.livereload = ""

  },

  // --------------------------------------------------------------------------
  // new task
  // --------------------------------------------------------------------------

  new: function(){
    if (!argv._[1]) { return console.log('\nyou must specify a name for your project\n'.red); }

    var source = path.join(__dirname, '../template');
    var destination = path.join(current_directory, argv._[1]);

    ncp(source, destination, function (err) {
     if (err) { return console.error(err); }
     console.log('\nnew project created at /'.green + argv._[1].green + '\n');
    });

    run("cd " + destination + "; git init", function(err){
      if (err) { console.log("You should install git ASAP.".red); console.log('Check out http://git-scm.com/ for a quick and easy download\n'.yellow); }
    });
  },

  // --------------------------------------------------------------------------
  // watch task
  // --------------------------------------------------------------------------

  watch: function(){
    if (this.in_project()) { this.initiate_options() } else { return this.no_project_warning() }
    
    // add in the livereload function
    global.options.locals.livereload = "<script>" + fs.readFileSync(path.join(__dirname, '../lib/reload.js'), 'utf8') + "</script>"
    
    // compile once
    compiler.compile_project(function(){ server.reload(); });

    // run the local server
    server.start(current_directory);

    // watch the directory for changes and reload
    watcher.watchDirectories(["./" + global.options.folder_config.views, "./" + global.options.folder_config.assets], function() {
      compiler.compile_project(function() {
        console.log('\nreloading page'.red); server.reload();
      });
    });
  },

  // --------------------------------------------------------------------------
  // compile task
  // --------------------------------------------------------------------------

  compile: function(){
    if (this.in_project()) { this.initiate_options() } else { return this.no_project_warning() }
    compiler.compile_project();
  },

  // --------------------------------------------------------------------------
  // bower integration
  // --------------------------------------------------------------------------

  js: function(command){
    if (this.in_project()) { this.initiate_options() } else { return this.no_project_warning() }

    bower.config.directory = "vendor/js"; // had to fork bower to expose the config api
    bower.commands[command[0] || 'help'].line(['node', __dirname].concat(command))
      .on('data',  function (data) { data && console.log(data); })
      .on('end',   function (data) { data && console.log(data); })
      .on('error', function (err)  { throw err })
  },

  // --------------------------------------------------------------------------
  // deploy task
  // --------------------------------------------------------------------------

  deploy: function(){
    if (this.in_project()) { this.initiate_options() } else { return this.no_project_warning() }

    // check to see if heroku is installed
    run('which heroku', function(err, out, stderr){
      if (err) {
        console.log("You need to install heroku first. Here's the download page".red)
        setTimeout(function(){ require('open')('https://toolbelt.heroku.com/') }, 700)
      } else {
        // check if there is alread a heroku app
        run("git branch -r | grep heroku", function(err,out,stdout){
          if (err) {
            console.log('creating app on heroku...'.green);
            var name = argv._[1]
            if (name == undefined) { name = "" }
            // run('heroku create ' + name, function(err, out, stderr){
            //   console.log('new heroku app created');
            //   should run `heroku open` here as well
            // });
          } else {
            // run("git rev-parse --abbrev-ref HEAD", function(err, out, stdout){
              // run('git push heroku ' + out, function(err, out, stderr){
              // // need to parse the output to grab the url here if possible
              //   console.log('deployed to heroku at (url)');
              // });
            // });
          }
        })
      }
    })
  },

  // --------------------------------------------------------------------------
  // help task
  // --------------------------------------------------------------------------

  help: function(){
    console.log("");
    console.log("Need some help? Here's what you can do with the roots command line tool:");
    console.log("");

    process.stdout.write("- ");
    process.stdout.write("new `name`: ".bold);
    process.stdout.write("create a new project structure in the current directory\n- ");

    process.stdout.write("compile: ".bold);
    process.stdout.write("compile, compress, and minify to /public\n- ");

    process.stdout.write("watch: ".bold);
    process.stdout.write("watch your project, compile and reload whenever you save\n- ");

    process.stdout.write("deploy `name`: ".bold);
    process.stdout.write("deploy your project to heroku\n- ");

    process.stdout.write("update: ".bold);
    process.stdout.write("update roots if there's a new version\n- ");

    process.stdout.write("version: ".bold);
    process.stdout.write("print the version of your current install\n");

    console.log("");
    console.log("...and by all means check out [docs link] for more help!");
    console.log("");

    // to add:
    // - js (list, search, install)
    // - plugin (generate, install)
  },

  // --------------------------------------------------------------------------
  // update task
  // --------------------------------------------------------------------------

  update: function(){
    console.log('this method still needs to be written');
  },

  // --------------------------------------------------------------------------
  // print the version
  // --------------------------------------------------------------------------

  version: function(){ console.log('not even released'); }

}

// run it (and run help if there's no command)
argv._[0] == undefined ? options.help() : options[argv._[0]](argv._.slice(1))
