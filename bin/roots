#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    colors = require('colors'),
    watch = require('watch'),
    compiler = require('../lib/compile-project'),
    server = require('../lib/server');

var current_directory = path.normalize(process.cwd());

// config variables (these will come from app.js)
var file_types = ['js', 'css', 'html', 'coffee', 'styl', 'jade', 'haml'];
var ignore_files = [];
ignore_files.push(/^_/);
var folder_config = { assets: 'assets', views: 'views' }

// --------------------------------------------------------------------------
// compile entire project fresh
// --------------------------------------------------------------------------

server.start(current_directory);
compiler.compile_project(folder_config, file_types, ignore_files);

// --------------------------------------------------------------------------
// now let's keep an eye on the files and recompile when necessary
// --------------------------------------------------------------------------

var assets_or_views = function(f, stat){
  var regex = new RegExp(current_directory.replace(/\//g, "\\\/") + '\/(views|assets).*');
  if (f.match(regex)){ return false; } else { return true; }
}

// this is working very nicely with the reload, although it is a bit slow.
// it seems like the file watch is what's slowing it down though, rather than the compile.

watch.watchTree(current_directory, { filter: assets_or_views }, function(f, curr, prev){
  console.log('file change detected'.red);
  if (typeof f == "object" && prev === null && curr === null) {
    // console.log('initial analysis complete');
  } else if (!assets_or_views(f)) {
    compiler.compile_project({ assets: 'assets', views: 'views' }, file_types, ignore_files, function(){
      server.reload();
    });
  }
});