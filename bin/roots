#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    colors = require('colors'),
    compiler = require('../lib/compile-project'),
    server = require('../lib/server'),
    argv = require('optimist').argv,
    watcher = require('../lib/watcher');


var current_directory = path.normalize(process.cwd());

// --------------------------------------------------------------------------
// set the config variables from app.coffee
// --------------------------------------------------------------------------

if (fs.existsSync(current_directory + '/app.coffee')) {
  require('coffee-script');
  var options = require(current_directory + '/app.coffee'); // pull the app config file

  // hard coded until a plugin interface is developed
  options.file_types = {}
  options.file_types.html = ['jade', 'ejs', 'html'];
  options.file_types.css = ['styl', 'css'];
  options.file_types.js = ['coffee', 'js'];

  // make sure all layout files are ignored
  for (var key in options.layouts){
    options.ignore_files.push(new RegExp(options.layouts[key]));
  }

  // add any additional globally available locals here
  // - range(1, 100).forEach
} else {
  // if there's no app.coffee file, chances are you aren't in a roots project
  argv._[0] = 'help'
}

// --------------------------------------------------------------------------
// watch task (default)
// --------------------------------------------------------------------------

if (argv._[0] === 'watch' || argv._[0] == undefined) {
  // rimraf public
  server.start(current_directory);
  compiler.compile_project(options);
  watcher.watchDirectories(["./" + options.folder_config.views,
                            "./" + options.folder_config.assets], function() {
                              compiler.compile_project(options, function() {
                                console.log('\nreloading page\n'.red);
                                server.reload();
                              });
                          });
}

// --------------------------------------------------------------------------
// compile task
// --------------------------------------------------------------------------

if (argv._[0] === 'compile') {
  // rimraf public
  compiler.compile_project(options);
}

// --------------------------------------------------------------------------
// deploy task
// --------------------------------------------------------------------------

if (argv._[0] === 'deploy') {
  var run = require('child_process').exec
  // check to see if heroku is installed
  run('which heroku', function(err, out, stderr){
    if (err) {
      console.log("You need to install heroku first. Here's the download page".red)
      setTimeout(function(){ require('open')('https://toolbelt.heroku.com/') }, 700)
    } else {
      // check if there is alread a heroku app
      run("git branch -r | grep heroku", function(err,out,stdout){
        if (err) {
          console.log('creating app on heroku...'.green);
          var name = argv._[1]
          if (name == undefined) { name = "" }
          // run('heroku create ' + name, function(err, out, stderr){
          //   console.log('new heroku app created');
          //   should run `heroku open` here as well
          // });
        } else {
          // could be worth checking the current branch as well
          // instead of assuming master
          // git rev-parse --abbrev-ref HEAD will directly output it

          // run('git push heroku master ' + name, function(err, out, stderr){
          //   console.log('deployed to heroku at (url)');
          // });
        }
      })
    }
  })
}

// --------------------------------------------------------------------------
// help task
// --------------------------------------------------------------------------

if (argv._[0] === 'help' || !fs.existsSync(current_directory + '/app.coffee')) {
  console.log("");
  console.log("Need some help? Here's what you can do with the roots command line tool:");
  console.log("");

  process.stdout.write("- ");
  process.stdout.write("new `name`: ".bold);
  process.stdout.write("create a new project structure in the current directory\n- ");
  // also run git init automatically on roots new

  process.stdout.write("compile: ".bold);
  process.stdout.write("compile your project once to the public folder\n- ");

  process.stdout.write("watch: ".bold);
  process.stdout.write("watch your project, compile when changes occur, and live reload\n- ");

  process.stdout.write("deploy `name`: ".bold);
  process.stdout.write("deploy your project to heroku (requires heroku gem)\n");

  // consider adding roots open and roots open remote

  console.log("");
  console.log("...and by all means check out [docs link] for more help!");
  console.log("");
}